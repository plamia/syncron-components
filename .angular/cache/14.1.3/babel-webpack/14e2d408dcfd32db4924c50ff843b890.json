{"ast":null,"code":"'use strict';\n\nvar Call = require('es-abstract/2021/Call');\n\nvar Get = require('es-abstract/2021/Get');\n\nvar GetMethod = require('es-abstract/2021/GetMethod');\n\nvar IsRegExp = require('es-abstract/2021/IsRegExp');\n\nvar ToString = require('es-abstract/2021/ToString');\n\nvar RequireObjectCoercible = require('es-abstract/2021/RequireObjectCoercible');\n\nvar callBound = require('call-bind/callBound');\n\nvar hasSymbols = require('has-symbols')();\n\nvar flagsGetter = require('regexp.prototype.flags');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\n\nvar getMatcher = function getMatcher(regexp) {\n  // eslint-disable-line consistent-return\n  var matcherPolyfill = regexpMatchAllPolyfill();\n\n  if (hasSymbols && typeof Symbol.matchAll === 'symbol') {\n    var matcher = GetMethod(regexp, Symbol.matchAll);\n\n    if (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {\n      return matcherPolyfill;\n    }\n\n    return matcher;\n  } // fallback for pre-Symbol.matchAll environments\n\n\n  if (IsRegExp(regexp)) {\n    return matcherPolyfill;\n  }\n};\n\nmodule.exports = function matchAll(regexp) {\n  var O = RequireObjectCoercible(this);\n\n  if (typeof regexp !== 'undefined' && regexp !== null) {\n    var isRegExp = IsRegExp(regexp);\n\n    if (isRegExp) {\n      // workaround for older engines that lack RegExp.prototype.flags\n      var flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);\n      RequireObjectCoercible(flags);\n\n      if ($indexOf(ToString(flags), 'g') < 0) {\n        throw new TypeError('matchAll requires a global regular expression');\n      }\n    }\n\n    var matcher = getMatcher(regexp);\n\n    if (typeof matcher !== 'undefined') {\n      return Call(matcher, regexp, [O]);\n    }\n  }\n\n  var S = ToString(O); // var rx = RegExpCreate(regexp, 'g');\n\n  var rx = new RegExp(regexp, 'g');\n  return Call(getMatcher(rx), rx, [S]);\n};","map":{"version":3,"names":["Call","require","Get","GetMethod","IsRegExp","ToString","RequireObjectCoercible","callBound","hasSymbols","flagsGetter","$indexOf","regexpMatchAllPolyfill","getMatcher","regexp","matcherPolyfill","Symbol","matchAll","matcher","RegExp","prototype","module","exports","O","isRegExp","flags","TypeError","S","rx"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/string.prototype.matchall/implementation.js"],"sourcesContent":["'use strict';\n\nvar Call = require('es-abstract/2021/Call');\nvar Get = require('es-abstract/2021/Get');\nvar GetMethod = require('es-abstract/2021/GetMethod');\nvar IsRegExp = require('es-abstract/2021/IsRegExp');\nvar ToString = require('es-abstract/2021/ToString');\nvar RequireObjectCoercible = require('es-abstract/2021/RequireObjectCoercible');\nvar callBound = require('call-bind/callBound');\nvar hasSymbols = require('has-symbols')();\nvar flagsGetter = require('regexp.prototype.flags');\n\nvar $indexOf = callBound('String.prototype.indexOf');\n\nvar regexpMatchAllPolyfill = require('./polyfill-regexp-matchall');\n\nvar getMatcher = function getMatcher(regexp) { // eslint-disable-line consistent-return\n\tvar matcherPolyfill = regexpMatchAllPolyfill();\n\tif (hasSymbols && typeof Symbol.matchAll === 'symbol') {\n\t\tvar matcher = GetMethod(regexp, Symbol.matchAll);\n\t\tif (matcher === RegExp.prototype[Symbol.matchAll] && matcher !== matcherPolyfill) {\n\t\t\treturn matcherPolyfill;\n\t\t}\n\t\treturn matcher;\n\t}\n\t// fallback for pre-Symbol.matchAll environments\n\tif (IsRegExp(regexp)) {\n\t\treturn matcherPolyfill;\n\t}\n};\n\nmodule.exports = function matchAll(regexp) {\n\tvar O = RequireObjectCoercible(this);\n\n\tif (typeof regexp !== 'undefined' && regexp !== null) {\n\t\tvar isRegExp = IsRegExp(regexp);\n\t\tif (isRegExp) {\n\t\t\t// workaround for older engines that lack RegExp.prototype.flags\n\t\t\tvar flags = 'flags' in regexp ? Get(regexp, 'flags') : flagsGetter(regexp);\n\t\t\tRequireObjectCoercible(flags);\n\t\t\tif ($indexOf(ToString(flags), 'g') < 0) {\n\t\t\t\tthrow new TypeError('matchAll requires a global regular expression');\n\t\t\t}\n\t\t}\n\n\t\tvar matcher = getMatcher(regexp);\n\t\tif (typeof matcher !== 'undefined') {\n\t\t\treturn Call(matcher, regexp, [O]);\n\t\t}\n\t}\n\n\tvar S = ToString(O);\n\t// var rx = RegExpCreate(regexp, 'g');\n\tvar rx = new RegExp(regexp, 'g');\n\treturn Call(getMatcher(rx), rx, [S]);\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,uBAAD,CAAlB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,sBAAD,CAAjB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,4BAAD,CAAvB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,2BAAD,CAAtB;;AACA,IAAIK,sBAAsB,GAAGL,OAAO,CAAC,yCAAD,CAApC;;AACA,IAAIM,SAAS,GAAGN,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIO,UAAU,GAAGP,OAAO,CAAC,aAAD,CAAP,EAAjB;;AACA,IAAIQ,WAAW,GAAGR,OAAO,CAAC,wBAAD,CAAzB;;AAEA,IAAIS,QAAQ,GAAGH,SAAS,CAAC,0BAAD,CAAxB;;AAEA,IAAII,sBAAsB,GAAGV,OAAO,CAAC,4BAAD,CAApC;;AAEA,IAAIW,UAAU,GAAG,SAASA,UAAT,CAAoBC,MAApB,EAA4B;EAAE;EAC9C,IAAIC,eAAe,GAAGH,sBAAsB,EAA5C;;EACA,IAAIH,UAAU,IAAI,OAAOO,MAAM,CAACC,QAAd,KAA2B,QAA7C,EAAuD;IACtD,IAAIC,OAAO,GAAGd,SAAS,CAACU,MAAD,EAASE,MAAM,CAACC,QAAhB,CAAvB;;IACA,IAAIC,OAAO,KAAKC,MAAM,CAACC,SAAP,CAAiBJ,MAAM,CAACC,QAAxB,CAAZ,IAAiDC,OAAO,KAAKH,eAAjE,EAAkF;MACjF,OAAOA,eAAP;IACA;;IACD,OAAOG,OAAP;EACA,CAR2C,CAS5C;;;EACA,IAAIb,QAAQ,CAACS,MAAD,CAAZ,EAAsB;IACrB,OAAOC,eAAP;EACA;AACD,CAbD;;AAeAM,MAAM,CAACC,OAAP,GAAiB,SAASL,QAAT,CAAkBH,MAAlB,EAA0B;EAC1C,IAAIS,CAAC,GAAGhB,sBAAsB,CAAC,IAAD,CAA9B;;EAEA,IAAI,OAAOO,MAAP,KAAkB,WAAlB,IAAiCA,MAAM,KAAK,IAAhD,EAAsD;IACrD,IAAIU,QAAQ,GAAGnB,QAAQ,CAACS,MAAD,CAAvB;;IACA,IAAIU,QAAJ,EAAc;MACb;MACA,IAAIC,KAAK,GAAG,WAAWX,MAAX,GAAoBX,GAAG,CAACW,MAAD,EAAS,OAAT,CAAvB,GAA2CJ,WAAW,CAACI,MAAD,CAAlE;MACAP,sBAAsB,CAACkB,KAAD,CAAtB;;MACA,IAAId,QAAQ,CAACL,QAAQ,CAACmB,KAAD,CAAT,EAAkB,GAAlB,CAAR,GAAiC,CAArC,EAAwC;QACvC,MAAM,IAAIC,SAAJ,CAAc,+CAAd,CAAN;MACA;IACD;;IAED,IAAIR,OAAO,GAAGL,UAAU,CAACC,MAAD,CAAxB;;IACA,IAAI,OAAOI,OAAP,KAAmB,WAAvB,EAAoC;MACnC,OAAOjB,IAAI,CAACiB,OAAD,EAAUJ,MAAV,EAAkB,CAACS,CAAD,CAAlB,CAAX;IACA;EACD;;EAED,IAAII,CAAC,GAAGrB,QAAQ,CAACiB,CAAD,CAAhB,CApB0C,CAqB1C;;EACA,IAAIK,EAAE,GAAG,IAAIT,MAAJ,CAAWL,MAAX,EAAmB,GAAnB,CAAT;EACA,OAAOb,IAAI,CAACY,UAAU,CAACe,EAAD,CAAX,EAAiBA,EAAjB,EAAqB,CAACD,CAAD,CAArB,CAAX;AACA,CAxBD"},"metadata":{},"sourceType":"script"}