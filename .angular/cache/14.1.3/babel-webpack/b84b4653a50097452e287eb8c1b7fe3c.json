{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport mapValues from 'lodash/mapValues';\nimport { logger } from '@storybook/client-logger';\nimport { filterArgTypes } from './filterArgTypes';\nimport { combineParameters } from './parameters';\n\nvar inferControl = function inferControl(argType, name, matchers) {\n  var type = argType.type,\n      options = argType.options;\n\n  if (!type && !options) {\n    return undefined;\n  } // args that end with background or color e.g. iconColor\n\n\n  if (matchers.color && matchers.color.test(name)) {\n    var controlType = argType.type.name;\n\n    if (controlType === 'string') {\n      return {\n        control: {\n          type: 'color'\n        }\n      };\n    }\n\n    logger.warn(\"Addon controls: Control of type color only supports string, received \\\"\".concat(controlType, \"\\\" instead\"));\n  } // args that end with date e.g. purchaseDate\n\n\n  if (matchers.date && matchers.date.test(name)) {\n    return {\n      control: {\n        type: 'date'\n      }\n    };\n  }\n\n  switch (type.name) {\n    case 'array':\n      return {\n        control: {\n          type: 'object'\n        }\n      };\n\n    case 'boolean':\n      return {\n        control: {\n          type: 'boolean'\n        }\n      };\n\n    case 'string':\n      return {\n        control: {\n          type: 'text'\n        }\n      };\n\n    case 'number':\n      return {\n        control: {\n          type: 'number'\n        }\n      };\n\n    case 'enum':\n      {\n        var _ref = type,\n            value = _ref.value;\n        return {\n          control: {\n            type: (value === null || value === void 0 ? void 0 : value.length) <= 5 ? 'radio' : 'select'\n          },\n          options: value\n        };\n      }\n\n    case 'function':\n    case 'symbol':\n      return null;\n\n    default:\n      return {\n        control: {\n          type: options ? 'select' : 'object'\n        }\n      };\n  }\n};\n\nexport var inferControls = function inferControls(context) {\n  var argTypes = context.argTypes,\n      _context$parameters = context.parameters,\n      __isArgsStory = _context$parameters.__isArgsStory,\n      _context$parameters$c = _context$parameters.controls;\n  _context$parameters$c = _context$parameters$c === void 0 ? {} : _context$parameters$c;\n  var _context$parameters$c2 = _context$parameters$c.include,\n      include = _context$parameters$c2 === void 0 ? null : _context$parameters$c2,\n      _context$parameters$c3 = _context$parameters$c.exclude,\n      exclude = _context$parameters$c3 === void 0 ? null : _context$parameters$c3,\n      _context$parameters$c4 = _context$parameters$c.matchers,\n      matchers = _context$parameters$c4 === void 0 ? {} : _context$parameters$c4;\n  if (!__isArgsStory) return argTypes;\n  var filteredArgTypes = filterArgTypes(argTypes, include, exclude);\n  var withControls = mapValues(filteredArgTypes, function (argType, name) {\n    return (argType === null || argType === void 0 ? void 0 : argType.type) && inferControl(argType, name, matchers);\n  });\n  return combineParameters(withControls, filteredArgTypes);\n};\ninferControls.secondPass = true;\nexport var argTypesEnhancers = [inferControls];","map":{"version":3,"names":["mapValues","logger","filterArgTypes","combineParameters","inferControl","argType","name","matchers","type","options","undefined","color","test","controlType","control","warn","concat","date","_ref","value","length","inferControls","context","argTypes","_context$parameters","parameters","__isArgsStory","_context$parameters$c","controls","_context$parameters$c2","include","_context$parameters$c3","exclude","_context$parameters$c4","filteredArgTypes","withControls","secondPass","argTypesEnhancers"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/@storybook/store/dist/esm/inferControls.js"],"sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport mapValues from 'lodash/mapValues';\nimport { logger } from '@storybook/client-logger';\nimport { filterArgTypes } from './filterArgTypes';\nimport { combineParameters } from './parameters';\n\nvar inferControl = function inferControl(argType, name, matchers) {\n  var type = argType.type,\n      options = argType.options;\n\n  if (!type && !options) {\n    return undefined;\n  } // args that end with background or color e.g. iconColor\n\n\n  if (matchers.color && matchers.color.test(name)) {\n    var controlType = argType.type.name;\n\n    if (controlType === 'string') {\n      return {\n        control: {\n          type: 'color'\n        }\n      };\n    }\n\n    logger.warn(\"Addon controls: Control of type color only supports string, received \\\"\".concat(controlType, \"\\\" instead\"));\n  } // args that end with date e.g. purchaseDate\n\n\n  if (matchers.date && matchers.date.test(name)) {\n    return {\n      control: {\n        type: 'date'\n      }\n    };\n  }\n\n  switch (type.name) {\n    case 'array':\n      return {\n        control: {\n          type: 'object'\n        }\n      };\n\n    case 'boolean':\n      return {\n        control: {\n          type: 'boolean'\n        }\n      };\n\n    case 'string':\n      return {\n        control: {\n          type: 'text'\n        }\n      };\n\n    case 'number':\n      return {\n        control: {\n          type: 'number'\n        }\n      };\n\n    case 'enum':\n      {\n        var _ref = type,\n            value = _ref.value;\n        return {\n          control: {\n            type: (value === null || value === void 0 ? void 0 : value.length) <= 5 ? 'radio' : 'select'\n          },\n          options: value\n        };\n      }\n\n    case 'function':\n    case 'symbol':\n      return null;\n\n    default:\n      return {\n        control: {\n          type: options ? 'select' : 'object'\n        }\n      };\n  }\n};\n\nexport var inferControls = function inferControls(context) {\n  var argTypes = context.argTypes,\n      _context$parameters = context.parameters,\n      __isArgsStory = _context$parameters.__isArgsStory,\n      _context$parameters$c = _context$parameters.controls;\n  _context$parameters$c = _context$parameters$c === void 0 ? {} : _context$parameters$c;\n  var _context$parameters$c2 = _context$parameters$c.include,\n      include = _context$parameters$c2 === void 0 ? null : _context$parameters$c2,\n      _context$parameters$c3 = _context$parameters$c.exclude,\n      exclude = _context$parameters$c3 === void 0 ? null : _context$parameters$c3,\n      _context$parameters$c4 = _context$parameters$c.matchers,\n      matchers = _context$parameters$c4 === void 0 ? {} : _context$parameters$c4;\n  if (!__isArgsStory) return argTypes;\n  var filteredArgTypes = filterArgTypes(argTypes, include, exclude);\n  var withControls = mapValues(filteredArgTypes, function (argType, name) {\n    return (argType === null || argType === void 0 ? void 0 : argType.type) && inferControl(argType, name, matchers);\n  });\n  return combineParameters(withControls, filteredArgTypes);\n};\ninferControls.secondPass = true;\nexport var argTypesEnhancers = [inferControls];"],"mappings":"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"},"metadata":{},"sourceType":"module"}