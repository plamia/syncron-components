{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar CodePointAt = require('./CodePointAt');\n\nvar IsIntegralNumber = require('./IsIntegralNumber');\n\nvar Type = require('./Type');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = GetIntrinsic('%TypeError%'); // https://ecma-international.org/ecma-262/12.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n  if (Type(S) !== 'String') {\n    throw new $TypeError('Assertion failed: `S` must be a String');\n  }\n\n  if (!IsIntegralNumber(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n    throw new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n  }\n\n  if (Type(unicode) !== 'Boolean') {\n    throw new $TypeError('Assertion failed: `unicode` must be a Boolean');\n  }\n\n  if (!unicode) {\n    return index + 1;\n  }\n\n  var length = S.length;\n\n  if (index + 1 >= length) {\n    return index + 1;\n  }\n\n  var cp = CodePointAt(S, index);\n  return index + cp['[[CodeUnitCount]]'];\n};","map":{"version":3,"names":["GetIntrinsic","require","CodePointAt","IsIntegralNumber","Type","MAX_SAFE_INTEGER","$TypeError","module","exports","AdvanceStringIndex","S","index","unicode","length","cp"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/es-abstract/2021/AdvanceStringIndex.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar CodePointAt = require('./CodePointAt');\nvar IsIntegralNumber = require('./IsIntegralNumber');\nvar Type = require('./Type');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\n// https://ecma-international.org/ecma-262/12.0/#sec-advancestringindex\n\nmodule.exports = function AdvanceStringIndex(S, index, unicode) {\n\tif (Type(S) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `S` must be a String');\n\t}\n\tif (!IsIntegralNumber(index) || index < 0 || index > MAX_SAFE_INTEGER) {\n\t\tthrow new $TypeError('Assertion failed: `length` must be an integer >= 0 and <= 2**53');\n\t}\n\tif (Type(unicode) !== 'Boolean') {\n\t\tthrow new $TypeError('Assertion failed: `unicode` must be a Boolean');\n\t}\n\tif (!unicode) {\n\t\treturn index + 1;\n\t}\n\tvar length = S.length;\n\tif ((index + 1) >= length) {\n\t\treturn index + 1;\n\t}\n\tvar cp = CodePointAt(S, index);\n\treturn index + cp['[[CodeUnitCount]]'];\n};\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,oBAAD,CAA9B;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAD,CAAlB;;AAEA,IAAII,gBAAgB,GAAGJ,OAAO,CAAC,2BAAD,CAA9B;;AAEA,IAAIK,UAAU,GAAGN,YAAY,CAAC,aAAD,CAA7B,C,CAEA;;AAEAO,MAAM,CAACC,OAAP,GAAiB,SAASC,kBAAT,CAA4BC,CAA5B,EAA+BC,KAA/B,EAAsCC,OAAtC,EAA+C;EAC/D,IAAIR,IAAI,CAACM,CAAD,CAAJ,KAAY,QAAhB,EAA0B;IACzB,MAAM,IAAIJ,UAAJ,CAAe,wCAAf,CAAN;EACA;;EACD,IAAI,CAACH,gBAAgB,CAACQ,KAAD,CAAjB,IAA4BA,KAAK,GAAG,CAApC,IAAyCA,KAAK,GAAGN,gBAArD,EAAuE;IACtE,MAAM,IAAIC,UAAJ,CAAe,iEAAf,CAAN;EACA;;EACD,IAAIF,IAAI,CAACQ,OAAD,CAAJ,KAAkB,SAAtB,EAAiC;IAChC,MAAM,IAAIN,UAAJ,CAAe,+CAAf,CAAN;EACA;;EACD,IAAI,CAACM,OAAL,EAAc;IACb,OAAOD,KAAK,GAAG,CAAf;EACA;;EACD,IAAIE,MAAM,GAAGH,CAAC,CAACG,MAAf;;EACA,IAAKF,KAAK,GAAG,CAAT,IAAeE,MAAnB,EAA2B;IAC1B,OAAOF,KAAK,GAAG,CAAf;EACA;;EACD,IAAIG,EAAE,GAAGZ,WAAW,CAACQ,CAAD,EAAIC,KAAJ,CAApB;EACA,OAAOA,KAAK,GAAGG,EAAE,CAAC,mBAAD,CAAjB;AACA,CAnBD"},"metadata":{},"sourceType":"script"}