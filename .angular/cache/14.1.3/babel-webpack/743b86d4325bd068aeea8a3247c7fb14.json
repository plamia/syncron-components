{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar callBind = require('call-bind');\n\nvar $resolve = GetIntrinsic('%Promise.resolve%', true);\nvar $PromiseResolve = $resolve && callBind($resolve); // https://262.ecma-international.org/9.0/#sec-promise-resolve\n\nmodule.exports = function PromiseResolve(C, x) {\n  if (!$PromiseResolve) {\n    throw new SyntaxError('This environment does not support Promises.');\n  }\n\n  return $PromiseResolve(C, x);\n};","map":{"version":3,"names":["GetIntrinsic","require","callBind","$resolve","$PromiseResolve","module","exports","PromiseResolve","C","x","SyntaxError"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/es-abstract/2021/PromiseResolve.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar callBind = require('call-bind');\n\nvar $resolve = GetIntrinsic('%Promise.resolve%', true);\nvar $PromiseResolve = $resolve && callBind($resolve);\n\n// https://262.ecma-international.org/9.0/#sec-promise-resolve\n\nmodule.exports = function PromiseResolve(C, x) {\n\tif (!$PromiseResolve) {\n\t\tthrow new SyntaxError('This environment does not support Promises.');\n\t}\n\treturn $PromiseResolve(C, x);\n};\n\n"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIE,QAAQ,GAAGH,YAAY,CAAC,mBAAD,EAAsB,IAAtB,CAA3B;AACA,IAAII,eAAe,GAAGD,QAAQ,IAAID,QAAQ,CAACC,QAAD,CAA1C,C,CAEA;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;EAC9C,IAAI,CAACL,eAAL,EAAsB;IACrB,MAAM,IAAIM,WAAJ,CAAgB,6CAAhB,CAAN;EACA;;EACD,OAAON,eAAe,CAACI,CAAD,EAAIC,CAAJ,CAAtB;AACA,CALD"},"metadata":{},"sourceType":"script"}