{"ast":null,"code":"import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n\n  var _a = argsArgArrayOrObject(args),\n      sources = _a.args,\n      keys = _a.keys;\n\n  var result = new Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop_1 = function (sourceIndex) {\n      var hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        return remainingCompletions--;\n      }, undefined, function () {\n        if (!remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n} //# sourceMappingURL=forkJoin.js.map","map":{"version":3,"names":["Observable","argsArgArrayOrObject","innerFrom","popResultSelector","OperatorSubscriber","mapOneOrManyArgs","createObject","forkJoin","args","_i","arguments","length","resultSelector","_a","sources","keys","result","subscriber","complete","values","Array","remainingCompletions","remainingEmissions","_loop_1","sourceIndex","hasValue","subscribe","value","undefined","next","pipe"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js"],"sourcesContent":["import { Observable } from '../Observable';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './innerFrom';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nexport function forkJoin() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var resultSelector = popResultSelector(args);\n    var _a = argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;\n    var result = new Observable(function (subscriber) {\n        var length = sources.length;\n        if (!length) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(length);\n        var remainingCompletions = length;\n        var remainingEmissions = length;\n        var _loop_1 = function (sourceIndex) {\n            var hasValue = false;\n            innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n                if (!hasValue) {\n                    hasValue = true;\n                    remainingEmissions--;\n                }\n                values[sourceIndex] = value;\n            }, function () { return remainingCompletions--; }, undefined, function () {\n                if (!remainingCompletions || !hasValue) {\n                    if (!remainingEmissions) {\n                        subscriber.next(keys ? createObject(keys, values) : values);\n                    }\n                    subscriber.complete();\n                }\n            }));\n        };\n        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n            _loop_1(sourceIndex);\n        }\n    });\n    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n//# sourceMappingURL=forkJoin.js.map"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,iBAAT,QAAkC,cAAlC;AACA,SAASC,kBAAT,QAAmC,iCAAnC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA,OAAO,SAASC,QAAT,GAAoB;EACvB,IAAIC,IAAI,GAAG,EAAX;;EACA,KAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;IAC1CD,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;EACH;;EACD,IAAIG,cAAc,GAAGT,iBAAiB,CAACK,IAAD,CAAtC;;EACA,IAAIK,EAAE,GAAGZ,oBAAoB,CAACO,IAAD,CAA7B;EAAA,IAAqCM,OAAO,GAAGD,EAAE,CAACL,IAAlD;EAAA,IAAwDO,IAAI,GAAGF,EAAE,CAACE,IAAlE;;EACA,IAAIC,MAAM,GAAG,IAAIhB,UAAJ,CAAe,UAAUiB,UAAV,EAAsB;IAC9C,IAAIN,MAAM,GAAGG,OAAO,CAACH,MAArB;;IACA,IAAI,CAACA,MAAL,EAAa;MACTM,UAAU,CAACC,QAAX;MACA;IACH;;IACD,IAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUT,MAAV,CAAb;IACA,IAAIU,oBAAoB,GAAGV,MAA3B;IACA,IAAIW,kBAAkB,GAAGX,MAAzB;;IACA,IAAIY,OAAO,GAAG,UAAUC,WAAV,EAAuB;MACjC,IAAIC,QAAQ,GAAG,KAAf;MACAvB,SAAS,CAACY,OAAO,CAACU,WAAD,CAAR,CAAT,CAAgCE,SAAhC,CAA0C,IAAItB,kBAAJ,CAAuBa,UAAvB,EAAmC,UAAUU,KAAV,EAAiB;QAC1F,IAAI,CAACF,QAAL,EAAe;UACXA,QAAQ,GAAG,IAAX;UACAH,kBAAkB;QACrB;;QACDH,MAAM,CAACK,WAAD,CAAN,GAAsBG,KAAtB;MACH,CANyC,EAMvC,YAAY;QAAE,OAAON,oBAAoB,EAA3B;MAAgC,CANP,EAMSO,SANT,EAMoB,YAAY;QACtE,IAAI,CAACP,oBAAD,IAAyB,CAACI,QAA9B,EAAwC;UACpC,IAAI,CAACH,kBAAL,EAAyB;YACrBL,UAAU,CAACY,IAAX,CAAgBd,IAAI,GAAGT,YAAY,CAACS,IAAD,EAAOI,MAAP,CAAf,GAAgCA,MAApD;UACH;;UACDF,UAAU,CAACC,QAAX;QACH;MACJ,CAbyC,CAA1C;IAcH,CAhBD;;IAiBA,KAAK,IAAIM,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGb,MAAxC,EAAgDa,WAAW,EAA3D,EAA+D;MAC3DD,OAAO,CAACC,WAAD,CAAP;IACH;EACJ,CA7BY,CAAb;EA8BA,OAAOZ,cAAc,GAAGI,MAAM,CAACc,IAAP,CAAYzB,gBAAgB,CAACO,cAAD,CAA5B,CAAH,GAAmDI,MAAxE;AACH,C,CACD"},"metadata":{},"sourceType":"module"}