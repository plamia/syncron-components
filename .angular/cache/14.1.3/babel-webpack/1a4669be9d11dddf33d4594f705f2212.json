{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.concat.js\";\n/* eslint-disable no-case-declarations */\n\nimport mapValues from 'lodash/mapValues';\nimport { includesQuotes, trimQuotes } from '../utils';\nvar SIGNATURE_REGEXP = /^\\(.*\\) => /;\nexport var convert = function convert(type) {\n  var name = type.name,\n      raw = type.raw,\n      computed = type.computed,\n      value = type.value;\n  var base = {};\n  if (typeof raw !== 'undefined') base.raw = raw;\n\n  switch (name) {\n    case 'enum':\n      {\n        var _values = computed ? value : value.map(function (v) {\n          var trimmedValue = trimQuotes(v.value);\n          return includesQuotes(v.value) || Number.isNaN(Number(trimmedValue)) ? trimmedValue : Number(trimmedValue);\n        });\n\n        return Object.assign({}, base, {\n          name: name,\n          value: _values\n        });\n      }\n\n    case 'string':\n    case 'number':\n    case 'symbol':\n      return Object.assign({}, base, {\n        name: name\n      });\n\n    case 'func':\n      return Object.assign({}, base, {\n        name: 'function'\n      });\n\n    case 'bool':\n    case 'boolean':\n      return Object.assign({}, base, {\n        name: 'boolean'\n      });\n\n    case 'arrayOf':\n    case 'array':\n      return Object.assign({}, base, {\n        name: 'array',\n        value: value && convert(value)\n      });\n\n    case 'object':\n      return Object.assign({}, base, {\n        name: name\n      });\n\n    case 'objectOf':\n      return Object.assign({}, base, {\n        name: name,\n        value: convert(value)\n      });\n\n    case 'shape':\n    case 'exact':\n      var values = mapValues(value, function (field) {\n        return convert(field);\n      });\n      return Object.assign({}, base, {\n        name: 'object',\n        value: values\n      });\n\n    case 'union':\n      return Object.assign({}, base, {\n        name: 'union',\n        value: value.map(function (v) {\n          return convert(v);\n        })\n      });\n\n    case 'instanceOf':\n    case 'element':\n    case 'elementType':\n    default:\n      {\n        if ((name === null || name === void 0 ? void 0 : name.indexOf('|')) > 0) {\n          // react-docgen-typescript-plugin doesn't always produce enum-like unions\n          // (like if a user has turned off shouldExtractValuesFromUnion) so here we\n          // try to recover and construct one.\n          try {\n            var literalValues = name.split('|').map(function (v) {\n              return JSON.parse(v);\n            });\n            return Object.assign({}, base, {\n              name: 'enum',\n              value: literalValues\n            });\n          } catch (err) {// fall through\n          }\n        }\n\n        var otherVal = value ? \"\".concat(name, \"(\").concat(value, \")\") : name;\n        var otherName = SIGNATURE_REGEXP.test(name) ? 'function' : 'other';\n        return Object.assign({}, base, {\n          name: otherName,\n          value: otherVal\n        });\n      }\n  }\n};","map":{"version":3,"names":["mapValues","includesQuotes","trimQuotes","SIGNATURE_REGEXP","convert","type","name","raw","computed","value","base","_values","map","v","trimmedValue","Number","isNaN","Object","assign","values","field","indexOf","literalValues","split","JSON","parse","err","otherVal","concat","otherName","test"],"sources":["/Users/plamenakichukova/syncron-sdk-components/node_modules/@storybook/docs-tools/dist/esm/argTypes/convert/proptypes/convert.js"],"sourcesContent":["import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\n/* eslint-disable no-case-declarations */\nimport mapValues from 'lodash/mapValues';\nimport { includesQuotes, trimQuotes } from '../utils';\nvar SIGNATURE_REGEXP = /^\\(.*\\) => /;\nexport var convert = function convert(type) {\n  var name = type.name,\n      raw = type.raw,\n      computed = type.computed,\n      value = type.value;\n  var base = {};\n  if (typeof raw !== 'undefined') base.raw = raw;\n\n  switch (name) {\n    case 'enum':\n      {\n        var _values = computed ? value : value.map(function (v) {\n          var trimmedValue = trimQuotes(v.value);\n          return includesQuotes(v.value) || Number.isNaN(Number(trimmedValue)) ? trimmedValue : Number(trimmedValue);\n        });\n\n        return Object.assign({}, base, {\n          name: name,\n          value: _values\n        });\n      }\n\n    case 'string':\n    case 'number':\n    case 'symbol':\n      return Object.assign({}, base, {\n        name: name\n      });\n\n    case 'func':\n      return Object.assign({}, base, {\n        name: 'function'\n      });\n\n    case 'bool':\n    case 'boolean':\n      return Object.assign({}, base, {\n        name: 'boolean'\n      });\n\n    case 'arrayOf':\n    case 'array':\n      return Object.assign({}, base, {\n        name: 'array',\n        value: value && convert(value)\n      });\n\n    case 'object':\n      return Object.assign({}, base, {\n        name: name\n      });\n\n    case 'objectOf':\n      return Object.assign({}, base, {\n        name: name,\n        value: convert(value)\n      });\n\n    case 'shape':\n    case 'exact':\n      var values = mapValues(value, function (field) {\n        return convert(field);\n      });\n      return Object.assign({}, base, {\n        name: 'object',\n        value: values\n      });\n\n    case 'union':\n      return Object.assign({}, base, {\n        name: 'union',\n        value: value.map(function (v) {\n          return convert(v);\n        })\n      });\n\n    case 'instanceOf':\n    case 'element':\n    case 'elementType':\n    default:\n      {\n        if ((name === null || name === void 0 ? void 0 : name.indexOf('|')) > 0) {\n          // react-docgen-typescript-plugin doesn't always produce enum-like unions\n          // (like if a user has turned off shouldExtractValuesFromUnion) so here we\n          // try to recover and construct one.\n          try {\n            var literalValues = name.split('|').map(function (v) {\n              return JSON.parse(v);\n            });\n            return Object.assign({}, base, {\n              name: 'enum',\n              value: literalValues\n            });\n          } catch (err) {// fall through\n          }\n        }\n\n        var otherVal = value ? \"\".concat(name, \"(\").concat(value, \")\") : name;\n        var otherName = SIGNATURE_REGEXP.test(name) ? 'function' : 'other';\n        return Object.assign({}, base, {\n          name: otherName,\n          value: otherVal\n        });\n      }\n  }\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}